
Here is the complete **summary prompt** combining **all** components of the `Country` entity with **nothing left out**:

---

### ✅ COUNTRY MODULE SUMMARY (Model, Validation, Repository, Controller, Stored Procedures)

---

#### **1. Country Model**

* **Represents** the structure of the Country table in the database.

**Properties (Columns):**

* `CountryID (int?)`: Nullable primary key.
* `Name (string)`: Name of the country.

**Relationships:**

* One country → many states (`StateModel` list).

---

#### **2. Validation Rules (CountryValidator)**

Ensures the `CountryModel` meets input criteria before processing.

**Validation Rules:**

* `Name`:

  * Must not be empty → Error: `"Name is required."`
  * Max length 100 characters → Error: `"Name cannot exceed 100 characters."`

---

#### **3. Repository Operations (CountryRepository)**

Handles all DB operations using stored procedures.

**Methods & Functionality:**

1. **`SelectAll()`**

   * Gets all countries.
   * Uses `API_COUNTRY_SELECTALL`.
   * Returns `List<CountryModel>`.

2. **`SelectById(int CountryID)`**

   * Gets specific country by ID.
   * Uses `API_COUNTRY_SELECTBYID`.
   * Returns `CountryModel`.

3. **`Insert(CountryModel country)`**

   * Inserts new country.
   * Uses `API_COUNTRY_INSERT`.
   * Parameters: `@NAME`.
   * Returns `true` on success.

4. **`Update(int CountryID, CountryModel country)`**

   * Updates existing country.
   * Uses `API_COUNTRY_UPDATE`.
   * Parameters: `@COUNTRYID`, `@NAME`.
   * Returns `true` on success.

5. **`Delete(int CountryID)`**

   * Deletes country by ID.
   * Uses `API_COUNTRY_DELETE`.
   * Returns `true` on success.

6. **`CountryDropDown()`**

   * Fetches all countries (dropdown purpose).
   * Uses `API_COUNTRY_DROPDOWN`.
   * Returns `List<CountryModel>` with `CountryID` and `Name`.

7. **`countryIDInState(int CountryID)`**

   * Checks if country is used in any state.
   * Uses `API_FIND_COUNTRYID_IN_STATE`.
   * Returns `true` if linked to states.

---

#### **4. Controller Operations (CountryController)**

Exposes API endpoints that map to repository methods.

**API Endpoints & Functionality:**

1. **`GET /api/Country`**

   * Returns all countries.
   * Calls `SelectAll()`.

2. **`GET /api/Country/{CountryID}`**

   * Returns specific country by ID.
   * Calls `SelectById()`.

3. **`POST /api/Country`**

   * Inserts a new country.
   * Calls `Insert()`.
   * Returns success or `400 Bad Request`.

4. **`PUT /api/Country/{CountryID}`**

   * Updates existing country.
   * Calls `Update()`.
   * Returns success or `404 Not Found`.

5. **`DELETE /api/Country/{CountryID}`**

   * Deletes country by ID.
   * Calls `Delete()`.
   * Verifies with `countryIDInState()` to ensure no dependent states exist.
   * Returns success or `400 Bad Request`.

6. **`GET /api/Country/CountryDropDown`**

   * Returns all countries for dropdowns.
   * Calls `CountryDropDown()`.

---

#### **5. Stored Procedures Used**

* `API_COUNTRY_SELECTALL` → Get all countries.
* `API_COUNTRY_SELECTBYID` → Get country by ID.
* `API_COUNTRY_INSERT` → Insert country.
* `API_COUNTRY_UPDATE` → Update country.
* `API_COUNTRY_DELETE` → Delete country.
* `API_COUNTRY_DROPDOWN` → List countries for dropdown.
* `API_FIND_COUNTRYID_IN_STATE` → Check country in use by states.

---

#### **Summary**

The **Country module** is a cleanly separated, well-structured system composed of:

* A robust **model** with key relationships.
* A strong **validator** ensuring name correctness.
* A complete **repository** that interacts with the DB via stored procedures.
* A fully featured **controller** exposing CRUD + dropdown APIs.
* Dependency-check logic to prevent deletion of countries in use.

This setup ensures smooth integration, reliable backend validation, and efficient frontend dropdown population.

---

Let me know when you're ready for the **State module** summary.

---------------------------------------------
#### 1. **City Model (`CityModel`)**

* Represents the **City** table in the database.
* **Properties:**

  * `CityID (int?)`: Nullable primary key.
  * `StateID (int)`: Foreign key to `StateModel`.
  * `Name (string)`: City name.
  * `CountryId (int)`: Foreign key to `CountryModel` (via State).
  * `stateModel (StateModel?)`: Navigation property.
* **Relationships:**

  * A **City → belongs to → State**.
  * A **State → belongs to → Country**.
  * Thus, a **City indirectly belongs to a Country**.

---

#### 2. **Lightweight Model (`CityDropDownModel`)**

* Used for dropdowns or minimal data transfer.
* **Properties:**

  * `CityID (int)`
  * `Name (string)`

---

#### 3. **Validation Rules (`CityValidator`)**

* Ensures valid data before processing.
* **Rules:**

  * `StateID > 0`

    * Error: *"StateID must be greater than 0."*
  * `Name`:

    * Not empty → *"Name is required."*
    * Max 100 characters → *"Name cannot exceed 100 characters."*

---

#### 4. **Repository Operations (`CityRepository`)**

* Handles database interactions using stored procedures.
* **Methods:**

  1. `SelectAll()` → Fetch all cities. *(SP: `API_CITY_SELECTALL`)*
  2. `SelectById(int CityID)` → Fetch by ID. *(SP: `API_CITY_SELECTBYID`)*
  3. `Insert(CityModel city)` → Add new city. *(SP: `API_CITY_INSERT`)*

     * Params: `@NAME`, `@STATEID`
  4. `Update(int CityID, CityModel city)` → Update city. *(SP: `API_CITY_UPDATE`)*

     * Params: `@CITYID`, `@NAME`, `@STATEID`
  5. `Delete(int CityID)` → Delete city. *(SP: `API_CITY_DELETE`)*
  6. `CityDropDown(int stateId)` → Cities for a state. *(SP: `API_CITY_DROPDOWN`)*
  7. `CityIDInColleges(int CityID)` → Check if city is used by any colleges. *(SP: `API_FIND_CITYID_IN_COLLEGES`)*

---

#### 5. **API Controller (`CityController`)**

* Exposes endpoints for managing city data.
* **Endpoints:**

  1. `GET /api/City` → Calls `SelectAll()`
  2. `GET /api/City/{CityID}` → Calls `SelectById()`
  3. `POST /api/City` → Calls `Insert()`
  4. `PUT /api/City/{CityID}` → Calls `Update()`
  5. `DELETE /api/City/{CityID}` →

     * First check: `CityIDInColleges()`
     * If not linked → Calls `Delete()`
  6. `GET /api/City/CityDropDown/{stateId}` → Calls `CityDropDown()`

---

#### 6. **Stored Procedures Used**

* `API_CITY_SELECTALL`
* `API_CITY_SELECTBYID`
* `API_CITY_INSERT`
* `API_CITY_UPDATE`
* `API_CITY_DELETE`
* `API_CITY_DROPDOWN`
* `API_FIND_CITYID_IN_COLLEGES`

---

### ✅ Final Summary

You must implement a **complete city management module** with:

* A robust data model, including dropdown variant.
* Strict validation rules via a validator.
* Repository layer using **stored procedures only** for DB interaction.
* Controller layer exposing **clean REST APIs** with validation and conditional deletion logic.
* Full **City → State → Country** hierarchy awareness.

---

Let me know when you're ready to proceed with the actual code or architecture breakdown for any layer.


---------------------------------------------------------------------------------------
1. State Model
The StateModel represents the structure of the State table in your database.
Properties (Columns):
•	StateID (int?): Nullable primary key for the state.
•	CountryID (int): Foreign key referencing the CountryModel.
•	Name (string): Name of the state.
•	countryModel (CountryModel?): Navigation property for the related country.
Relationships:
•	A state belongs to a country (CountryID is the foreign key).
•	A state can have multiple cities (CityModel).
---
2. Validation Rules
The StateValidator ensures that the StateModel adheres to specific rules:
•	CountryID:
•	Must be greater than 0.
•	Error Message: "CountryID must be greater than 0."
•	Name:
•	Must not be empty.
•	Error Message: "Name is required."
•	Maximum length: 100 characters.
•	Error Message: "Name cannot exceed 100 characters."
---
3. Repository Operations
The StateRepository handles database interactions for the StateModel. Key methods include:
•	SelectAll(): Fetches all states.
•	SelectById(int StateID): Fetches a specific state by its StateID.
•	Insert(StateModel state): Inserts a new state.
•	Update(int StateID, StateModel state): Updates an existing state.
•	Delete(int StateID): Deletes a state.
•	StateDropDown(int CountryID): Fetches states for a specific country.
---
4. Controller Operations
The StateController exposes API endpoints for managing states:
•	GET /api/State: Fetches all states.
•	GET /api/State/{StateID}: Fetches a specific state.
•	POST /api/State: Inserts a new state.
•	PUT /api/State/{StateID}: Updates an existing state.
•	DELETE /api/State/{StateID}: Deletes a state.
•	GET /api/State/StateDropDown/{CountryID}: Fetches states for a specific country.
---
5. Stored Procedures
The repository methods rely on the following stored procedures:
•	API_STATE_SELECTALL: Fetches all states.
•	API_STATE_SELECTBYID: Fetches a state by its ID.
•	API_STATE_INSERT: Inserts a new state.
•	API_STATE_UPDATE: Updates an existing state.
•	API_STATE_DELETE: Deletes a state.
•	API_STATE_DROPDOWN: Fetches states for a specific country.

-----------------------------------------------------------------------------

Here’s a concise overview of the Branch entity in your project:
---
1. Branch Model
The BranchModel represents the structure of the Branch table in your database.
Properties (Columns):
•	BranchID (int?): Nullable primary key for the branch.
•	Name (string): Name of the branch.
•	Code (string): Unique code for the branch.
---
2. Validation Rules
The BranchValidator ensures that the BranchModel adheres to specific rules:
•	Name:
•	Must not be empty.
•	Error Message: "Name is required."
•	Maximum length: 100 characters.
•	Error Message: "Name cannot exceed 100 characters."
•	Code:
•	Must not be empty.
•	Error Message: "Code is required."
•	Maximum length: 10 characters.
•	Error Message: "Code cannot exceed 10 characters."
---
3. Repository Operations
The BranchRepository handles database interactions for the BranchModel. Key methods include:
•	SelectAll(): Fetches all branches.
•	SelectById(int BranchID): Fetches a specific branch by its BranchID.
•	Insert(BranchModel branch): Inserts a new branch.
•	Update(int BranchID, BranchModel branch): Updates an existing branch.
•	Delete(int BranchID): Deletes a branch.
---
4. Controller Operations
The BranchController exposes API endpoints for managing branches:
•	GET /api/Branch: Fetches all branches.
•	GET /api/Branch/{BranchID}: Fetches a specific branch.
•	POST /api/Branch: Inserts a new branch.
•	PUT /api/Branch/{BranchID}: Updates an existing branch.
•	DELETE /api/Branch/{BranchID}: Deletes a branch.
---
5. Stored Procedures
The repository methods rely on the following stored procedures:
•	API_BRANCH_SELECTALL: Fetches all branches.
•	API_BRANCH_SELECTBYID: Fetches a branch by its ID.
•	API_BRANCH_INSERT: Inserts a new branch.
•	API_BRANCH_UPDATE: Updates an existing branch.
•	API_BRANCH_DELETE: Deletes a branch.
---
This structure ensures seamless management of branches, including validation, CRUD operations, and frontend integration. Let me know if you need further details!
--------------------------------------------------------------------
1. College Model
The CollegeModel represents the structure of the College table in your database.
Properties (Columns):
•	CollegeID (int?): Nullable primary key for the college.
•	Name (string): Name of the college.
•	CityID (int): Foreign key referencing the CityModel.
•	Address (string): Address of the college.
•	cityModel (CityModel?): Navigation property for the related city.
---
2. Validation Rules
The CollegeValidator ensures that the CollegeModel adheres to specific rules:
•	Name:
•	Must not be empty.
•	Error Message: "Name is required."
•	Maximum length: 200 characters.
•	Error Message: "Name cannot exceed 200 characters."
•	CityID:
•	Must be greater than 0.
•	Error Message: "CityID must be greater than 0."
•	Address:
•	Must not be empty.
•	Error Message: "Address is required."
•	Maximum length: 300 characters.
•	Error Message: "Address cannot exceed 300 characters."
---
3. Repository Operations
The CollegeRepository handles database interactions for the CollegeModel. Key methods include:
•	SelectAll(): Fetches all colleges.
•	SelectById(int CollegeID): Fetches a specific college by its CollegeID.
•	Insert(CollegeModel college): Inserts a new college.
•	Update(int CollegeID, CollegeModel college): Updates an existing college.
•	Delete(int CollegeID): Deletes a college.
---
4. Controller Operations
The CollegeController exposes API endpoints for managing colleges:
•	GET /api/College: Fetches all colleges.
•	GET /api/College/{CollegeID}: Fetches a specific college.
•	POST /api/College: Inserts a new college.
•	PUT /api/College/{CollegeID}: Updates an existing college.
•	DELETE /api/College/{CollegeID}: Deletes a college.
---
5. Stored Procedures
The repository methods rely on the following stored procedures:
•	API_COLLEGE_SELECTALL: Fetches all colleges.
•	API_COLLEGE_SELECTBYID: Fetches a college by its ID.
•	API_COLLEGE_INSERT: Inserts a new college.
•	API_COLLEGE_UPDATE: Updates an existing college.
•	API_COLLEGE_DELETE: Deletes a college.
---
This structure ensures seamless management of colleges, including validation, CRUD operations, and frontend integration. 
--------------------------------------------------------------------
Here’s a concise overview of the User entity in your project:
---
1. User Model
The UserModel represents the structure of the User table in your database.
Properties (Columns):
•	UserID (int?): Nullable primary key for the user.
•	FirstName (string): First name of the user.
•	LastName (string): Last name of the user.
•	Email (string): Email address of the user.
•	PasswordHash (string): Hashed password for authentication.
•	Role (string?): Role of the user, defaulting to "User" (e.g., "Admin" or "User").
---
2. Validation Rules
The UserValidator ensures that the UserModel adheres to specific rules:
•	FirstName:
•	Must not be empty.
•	Maximum length: 100 characters.
•	Error Messages: "First Name is required.", "First Name cannot exceed 100 characters."
•	LastName:
•	Must not be empty.
•	Maximum length: 100 characters.
•	Error Messages: "Last Name is required.", "Last Name cannot exceed 100 characters."
•	Email:
•	Must not be empty.
•	Must be a valid email format.
•	Maximum length: 200 characters.
•	Error Messages: "Email is required.", "Invalid Email format.", "Email cannot exceed 200 characters."
•	PasswordHash:
•	Must not be empty.
•	Minimum length: 6 characters.
•	Maximum length: 30 characters.
•	Error Messages: "Password is required.", "Password must be at least 6 characters long.", "Password cannot exceed 30 characters."
•	Role:
•	Must be either "Admin" or "User" if provided.
•	Error Message: "Role must be either 'Admin' or 'User' if provided."
---
3. Repository Operations
The UserRepository handles database interactions for the UserModel. Key methods include:
•	SelectAll(): Fetches all users.
•	SelectById(int UserID): Fetches a specific user by their UserID.
•	Insert(UserModel user): Inserts a new user.
•	Update(int UserID, UserModel user): Updates an existing user.
•	Delete(int UserID): Deletes a user.
---
4. Controller Operations
The UserController exposes API endpoints for managing users:
•	GET /api/User: Fetches all users.
•	GET /api/User/{UserID}: Fetches a specific user.
•	POST /api/User: Inserts a new user.
•	PUT /api/User/{UserID}: Updates an existing user.
•	DELETE /api/User/{UserID}: Deletes a user.
---
5. Stored Procedures
The repository methods rely on the following stored procedures:
•	API_USER_SELECTALL: Fetches all users.
•	API_USER_SELECTBYID: Fetches a user by their ID.
•	API_USER_INSERT: Inserts a new user.
•	API_USER_UPDATE: Updates an existing user.
•	API_USER_DELETE: Deletes a user.
---
This structure ensures seamless management of users, including validation, CRUD operations, and frontend integration.
--------------------------------------------------------------------
1. Review Model
The ReviewModel represents the structure of the Review table in your database.
Properties (Columns):
•	ReviewID (int?): Nullable primary key for the review.
•	CollegeID (int): Foreign key referencing the CollegeModel.
•	UserID (int): Foreign key referencing the UserModel.
•	Rating (int): Rating given by the user (e.g., 1 to 5).
•	Comment (string?): Optional comment provided by the user.
•	collegeModel (CollegeModel?): Navigation property for the related college.
•	userModel (UserModel?): Navigation property for the related user.
---
2. Validation Rules
The ReviewValidator ensures that the ReviewModel adheres to specific rules:
•	CollegeID:
•	Must be greater than 0.
•	Error Message: "CollegeID must be greater than 0."
•	UserID:
•	Must be greater than 0.
•	Error Message: "UserID must be greater than 0."
•	Rating:
•	Must be between 1 and 5.
•	Error Message: "Rating must be between 1 and 5."
•	Comment:
•	Optional, but if provided, must not exceed 500 characters.
•	Error Message: "Comment cannot exceed 500 characters."
---
3. Repository Operations
The ReviewRepository handles database interactions for the ReviewModel. Key methods include:
•	SelectAll(): Fetches all reviews.
•	SelectById(int ReviewID): Fetches a specific review by its ReviewID.
•	Insert(ReviewModel review): Inserts a new review.
•	Update(int ReviewID, ReviewModel review): Updates an existing review.
•	Delete(int ReviewID): Deletes a review.
---
4. Controller Operations
The ReviewController exposes API endpoints for managing reviews:
•	GET /api/Review: Fetches all reviews.
•	GET /api/Review/{ReviewID}: Fetches a specific review.
•	POST /api/Review: Inserts a new review.
•	PUT /api/Review/{ReviewID}: Updates an existing review.
•	DELETE /api/Review/{ReviewID}: Deletes a review.
---
5. Stored Procedures
The repository methods rely on the following stored procedures:
•	API_REVIEW_SELECTALL: Fetches all reviews.
•	API_REVIEW_SELECTBYID: Fetches a review by its ID.
•	API_REVIEW_INSERT: Inserts a new review.
•	API_REVIEW_UPDATE: Updates an existing review.
•	API_REVIEW_DELETE: Deletes a review.
---
This structure ensures seamless management of reviews, including validation, CRUD operations, and frontend integration. 
--------------------------------------------------------------------
1. Course Model
The CourseModel represents the structure of the Course table in your database.
Properties (Columns):
•	CourseID (int?): Nullable primary key for the course.
•	Name (string): Name of the course.
•	Code (string): Unique code for the course.
•	Duration (int): Duration of the course in months.
---
2. Validation Rules
The CourseValidator ensures that the CourseModel adheres to specific rules:
•	Name:
•	Must not be empty.
•	Maximum length: 200 characters.
•	Error Messages: "Name is required.", "Name cannot exceed 200 characters."
•	Code:
•	Must not be empty.
•	Maximum length: 20 characters.
•	Error Messages: "Code is required.", "Code cannot exceed 20 characters."
•	Duration:
•	Must be greater than 0.
•	Error Message: "Duration must be greater than 0."
---
3. Repository Operations
The CourseRepository handles database interactions for the CourseModel. Key methods include:
•	SelectAll(): Fetches all courses.
•	SelectById(int CourseID): Fetches a specific course by its CourseID.
•	Insert(CourseModel course): Inserts a new course.
•	Update(int CourseID, CourseModel course): Updates an existing course.
•	Delete(int CourseID): Deletes a course.
---
4. Controller Operations
The CourseController exposes API endpoints for managing courses:
•	GET /api/Course: Fetches all courses.
•	GET /api/Course/{CourseID}: Fetches a specific course.
•	POST /api/Course: Inserts a new course.
•	PUT /api/Course/{CourseID}: Updates an existing course.
•	DELETE /api/Course/{CourseID}: Deletes a course.
---
5. Stored Procedures
The repository methods rely on the following stored procedures:
•	API_COURSE_SELECTALL: Fetches all courses.
•	API_COURSE_SELECTBYID: Fetches a course by its ID.
•	API_COURSE_INSERT: Inserts a new course.
•	API_COURSE_UPDATE: Updates an existing course.
•	API_COURSE_DELETE: Deletes a course.
---
This structure ensures seamless management of courses, including validation, CRUD operations, and frontend integration. 
--------------------------------------------------------------------
Here’s a concise overview of the CollegeCourse entity in your project:
---
1. CollegeCourse Model
The CollegeCourseModel represents the structure of the CollegeCourse table in your database.
Properties (Columns):
•	CollegeCourseID (int?): Nullable primary key for the college-course relationship.
•	CollegeID (int): Foreign key referencing the CollegeModel.
•	CourseID (int): Foreign key referencing the CourseModel.
•	SeatsAvailable (int): Number of seats available for the course in the college.
•	collegeModel (CollegeModel?): Navigation property for the related college.
•	courseModel (CourseModel?): Navigation property for the related course.
---
2. Validation Rules
The CollegeCourseValidator ensures that the CollegeCourseModel adheres to specific rules:
•	CollegeID:
•	Must be greater than 0.
•	Error Message: "CollegeID must be greater than 0."
•	CourseID:
•	Must be greater than 0.
•	Error Message: "CourseID must be greater than 0."
•	SeatsAvailable:
•	Must be greater than or equal to 0.
•	Error Message: "SeatsAvailable must be greater than or equal to 0."
---
3. Repository Operations
The CollegeCourseRepository handles database interactions for the CollegeCourseModel. Key methods include:
•	SelectAll(): Fetches all college-course relationships.
•	SelectById(int CollegeCourseID): Fetches a specific college-course relationship by its CollegeCourseID.
•	Insert(CollegeCourseModel collegeCourse): Inserts a new college-course relationship.
•	Update(int CollegeCourseID, CollegeCourseModel collegeCourse): Updates an existing college-course relationship.
•	Delete(int CollegeCourseID): Deletes a college-course relationship.
---
4. Controller Operations
The CollegeCourseController exposes API endpoints for managing college-course relationships:
•	GET /api/CollegeCourse: Fetches all college-course relationships.
•	GET /api/CollegeCourse/{CollegeCourseID}: Fetches a specific college-course relationship.
•	POST /api/CollegeCourse: Inserts a new college-course relationship.
•	PUT /api/CollegeCourse/{CollegeCourseID}: Updates an existing college-course relationship.
•	DELETE /api/CollegeCourse/{CollegeCourseID}: Deletes a college-course relationship.
---
5. Stored Procedures
The repository methods rely on the following stored procedures:
•	API_COLLEGECOURSE_SELECTALL: Fetches all college-course relationships.
•	API_COLLEGECOURSE_SELECTBYID: Fetches a college-course relationship by its ID.
•	API_COLLEGECOURSE_INSERT: Inserts a new college-course relationship.
•	API_COLLEGECOURSE_UPDATE: Updates an existing college-course relationship.
•	API_COLLEGECOURSE_DELETE: Deletes a college-course relationship.
---
This structure ensures seamless management of college-course relationships, including validation, CRUD operations, and frontend integration. 



_________________________________________________________
CITY TABLE
CITYID STATEID NAME
4	3	Toronto
5	2	NY City
24	3	111
32	15	Sydney
33	15	Newcastle
34	16	Melbourne
35	16	Geelong
36	17	Brisbane
37	17	Gold Coast
39	18	Campinas
40	18	Campinas
41	18	São Paulo City
42	19	Rio de Janeiro City
43	19	Niterói
44	20	Salvador
45	20	Feira de Santana
46	22	Munich
47	22	Nuremberg
48	23	Frankfurt
49	23	Wiesbaden
50	24	Dresden
51	24	Leipzig
52	25	Bengaluru
53	25	Mysuru
54	26	Chennai
55	26	Coimbatore
56	27	Houston
57	27	Dallas
58	28	Miami
59	28	Orlando

____________________________________
COUNTRY TABLE
COUNTRYID NAME
24	Australia
23	Brazil
2	Canada
25	Germany
3	India
1	United States
_________________________________
STATE TABLE

STATEID COUNTRYID NAME
1	1	Californiaa
2	1	New York
3	2	Ontario
4	3	Maharashtra
15	24	New South Wales
16	24	Victoria
17	24	Queensland
18	23	São Paulo
19	23	Rio de Janeiro
20	23	Bahia
22	25	Bavaria
23	25	Hesse
24	25	Saxony
25	3	Karnataka
26	3	Tamil Nadu
27	1	Texas
28	1	Florida

REMEMBER THIS DATA NOW 
______________________________________


NAME	varchar(200)	
CITYID	int
TYPE	varchar(200)	
WEBSITE	varchar(200)	
DESCRIPTION	text	
ESTABLISHMENT_YEAR	int	
ADDRESS	text	

HERE I WANT DETAIL